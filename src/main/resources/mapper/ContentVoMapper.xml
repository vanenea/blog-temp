<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.dao.ContentMapper">
	<resultMap id="BaseResultMap" type="com.blog.model.Content">
		<id column="cid" jdbcType="INTEGER" property="cid" />
		<result column="title" jdbcType="VARCHAR" property="title" />
		<result column="slug" jdbcType="VARCHAR" property="slug" />
		<result column="created" jdbcType="INTEGER" property="created" />
		<result column="modified" jdbcType="INTEGER" property="modified" />
		<result column="author_id" jdbcType="INTEGER" property="authorId" />
		<result column="type" jdbcType="VARCHAR" property="type" />
		<result column="status" jdbcType="VARCHAR" property="status" />
		<result column="tags" jdbcType="VARCHAR" property="tags" />
		<result column="categories" jdbcType="VARCHAR" property="categories" />
		<result column="hits" jdbcType="INTEGER" property="hits" />
		<result column="comments_num" jdbcType="INTEGER" property="commentsNum" />
		<result column="allow_comment" jdbcType="BIT" property="allowComment" />
		<result column="allow_ping" jdbcType="BIT" property="allowPing" />
		<result column="allow_feed" jdbcType="BIT" property="allowFeed" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.blog.model.Content">
		<result column="content" jdbcType="LONGVARCHAR" property="content" />
	</resultMap>
	<sql id="Base_Column_List">
		cid, title, slug, created, modified, author_id, type, status, tags, categories, hits, 
    	comments_num, allow_comment, allow_ping, allow_feed
	</sql>
	<sql id="Blob_Column_List">
		content
	</sql>
	
	<!--
	 * 找到所有的文章
	 * @return
	List<Content> findAllContent(); -->
	<select id="findAllContent" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"/>
		FROM 
			t_contents
		ORDER BY
			created DESC
	</select>
	
	<!--
	 * 根据条件找到相应的文章
	 * @param content
	 * @return
	Content findContentByCondition(Content content); -->
	<select id="findContentByCondition" parameterType="com.blog.model.Content" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		FROM
			t_contents
		<where>
			<if test="cid != null">
				cid = #{cid}
			</if>
			<if test="slug != null">
				slug = #{slug}
			</if>
		</where>
	</select>
	
	<resultMap id="archiveBoMap" type="com.blog.model.ContentBo">
	    <id column="date" property="date"/>
	    <result column="count" property="count"/>
  	</resultMap>
  	
  	<!--
	 * 找到ContentBo集合
	 * @return
	List<ContentBo> findContentByCondition(); -->
  	<select id="findContent" resultMap="archiveBoMap">
  		select 
  			FROM_UNIXTIME(created,'%Y年%m月') 	AS date,
  			count(*) 							AS count
  		from
  			t_contents
  		GROUP BY
  			date
  		ORDER BY
  			date DESC
  	</select>
  	
  <!-- 	
	 *	根据日期分类
	 * @return
	List<Content> findContentByDate(String date); -->
  	<select id="findContentByDate" resultMap="BaseResultMap" parameterType="java.lang.String">
  		SELECT
			<include refid="Base_Column_List"/>,
			FROM_UNIXTIME(created, '%Y年%m月') AS date1
		FROM 
			t_contents
		HAVING
			date1=#{date}
  	</select>
</mapper>